import java.util.*;

public class TopKFrequentWords {
    public static List<String> topKFrequent(String[] words, int k) {
        if (words == null || words.length == 0 || k <= 0) {
            return new ArrayList<>();
        }

        Map<String, Integer> frequencyMap = new HashMap<>();

        // Count the frequency of each word
        for (String word : words) {
            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);
        }

        // Create a priority queue (min-heap) to keep track of top K elements
        PriorityQueue<String> minHeap = new PriorityQueue<>((w1, w2) -> {
            int frequencyCompare = frequencyMap.get(w1).compareTo(frequencyMap.get(w2));
            if (frequencyCompare == 0) {
                return w2.compareTo(w1);
            }
            return frequencyCompare;
        });

        // Maintain the heap size to be at most k
        for (String word : frequencyMap.keySet()) {
            minHeap.offer(word);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        // Extract elements from the heap and build the result list
        List<String> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll());
        }

        // Since we need the results in the order of highest frequency to lowest,
        // we need to reverse the list because the heap gives us the lowest frequency first.
        Collections.reverse(result);

        return result;
    }

    public static void main(String[] args) {
        String[] words = {"i", "love", "coding", "i", "love", "MyCountry"};
        int k = 2;
        List<String> topKWords = topKFrequent(words, k);
        System.out.println("The top " + k + " frequent words are: " + topKWords);
    }
}
