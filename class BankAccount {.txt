 class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println(Thread.currentThread().getName() + " deposited: " + amount + ", New balance: " + balance);
        }
    }

    public synchronized void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " withdrew: " + amount + ", New balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " failed to withdraw: " + amount + ", Insufficient balance: " + balance);
        }
    }

    public double getBalance() {
        return balance;
    }
}

class DepositThread implements Runnable {
    private BankAccount account;
    private double amount;

    public DepositThread(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            account.deposit(amount);
            try {
                Thread.sleep(100); // Simulating time taken for deposit
            } catch (InterruptedException e) {
                System.out.println(Thread.currentThread().getName() + " interrupted.");
            }
        }
    }
}

class WithdrawThread implements Runnable {
    private BankAccount account;
    private double amount;

    public WithdrawThread(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            account.withdraw(amount);
            try {
                Thread.sleep(100); // Simulating time taken for withdrawal
            } catch (InterruptedException e) {
                System.out.println(Thread.currentThread().getName() + " interrupted.");
            }
        }
    }
}

public class Bank123 {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000.0);

        DepositThread depositTask = new DepositThread(account, 200.0);
        WithdrawThread withdrawTask = new WithdrawThread(account, 150.0);

        Thread depositThread = new Thread(depositTask, "DepositThread");
        Thread withdrawThread = new Thread(withdrawTask, "WithdrawThread");

        depositThread.start();
        withdrawThread.start();

        try {
            depositThread.join();
            withdrawThread.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Final balance: " + account.getBalance());
    }
}




//output:
// D:\anudip>javac Bank123.java

// D:\anudip>java Bank123
// DepositThread deposited: 200.0, New balance: 1200.0
// WithdrawThread withdrew: 150.0, New balance: 1050.0
// WithdrawThread withdrew: 150.0, New balance: 900.0
// DepositThread deposited: 200.0, New balance: 1100.0
// WithdrawThread withdrew: 150.0, New balance: 950.0
// DepositThread deposited: 200.0, New balance: 1150.0
// DepositThread deposited: 200.0, New balance: 1350.0
// WithdrawThread withdrew: 150.0, New balance: 1200.0
// WithdrawThread withdrew: 150.0, New balance: 1050.0
// DepositThread deposited: 200.0, New balance: 1250.0
// Final balance: 1250.0

